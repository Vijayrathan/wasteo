{"ast":null,"code":"import { BehaviorSubject, tap } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/api/users`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadUserFromStorage();\n  }\n  loadUserFromStorage() {\n    const userString = localStorage.getItem(\"currentUser\");\n    if (userString) {\n      try {\n        const userData = JSON.parse(userString);\n        this.currentUserSubject.next(userData);\n      } catch (error) {\n        console.error(\"Error parsing stored user data\", error);\n        localStorage.removeItem(\"currentUser\");\n      }\n    }\n  }\n  // Register a new user\n  register(user) {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n  // Login user\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(response => {\n      localStorage.setItem(\"token\", response.token);\n      localStorage.setItem(\"currentUser\", JSON.stringify(response.user));\n      this.currentUserSubject.next(response.user);\n    }));\n  }\n  // Get user by ID\n  getUserById(userId) {\n    return this.http.get(`${this.apiUrl}/${userId}`);\n  }\n  // Update user profile\n  updateProfile(userId, userData) {\n    return this.http.put(`${this.apiUrl}/${userId}`, userData).pipe(tap(updatedUser => {\n      const currentUser = this.getCurrentUser();\n      if (currentUser && currentUser._id === updatedUser._id) {\n        const newUserData = {\n          ...currentUser,\n          ...updatedUser\n        };\n        localStorage.setItem(\"currentUser\", JSON.stringify(newUserData));\n        this.currentUserSubject.next(newUserData);\n      }\n    }));\n  }\n  // Get user sustainability stats\n  getUserStats(userId) {\n    return this.http.get(`${this.apiUrl}/${userId}/stats`);\n  }\n  // Get user badges\n  getUserBadges(userId) {\n    return this.http.get(`${this.apiUrl}/${userId}/badges`);\n  }\n  // Update user preferences\n  updateUserPreferences(userId, preferences) {\n    return this.http.post(`${this.apiUrl}/${userId}/preferences`, {\n      goalPreferences: preferences\n    });\n  }\n  // Log out user and clear storage\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"currentUser\");\n    this.currentUserSubject.next(null);\n  }\n  // Check if user is logged in\n  isLoggedIn() {\n    return !!localStorage.getItem(\"token\");\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n  static {\n    this.ɵfac = function UserService_Factory(t) {\n      return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: UserService,\n      factory: UserService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","UserService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","loadUserFromStorage","userString","localStorage","getItem","userData","JSON","parse","next","error","console","removeItem","register","user","post","login","credentials","pipe","response","setItem","token","stringify","getUserById","userId","get","updateProfile","put","updatedUser","currentUser","getCurrentUser","_id","newUserData","getUserStats","getUserBadges","updateUserPreferences","preferences","goalPreferences","logout","isLoggedIn","value","getToken","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/thameem/Desktop/Spring 2025/Waste0/frontend/src/app/services/user.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { BehaviorSubject, Observable, tap } from \"rxjs\";\nimport {\n  User,\n  UserStats,\n  AuthResponse,\n  UserPreferences,\n} from \"../models/user.model\";\nimport { environment } from \"../../environments/environment\";\n\ninterface LoginResponse {\n  token: string;\n  user: User;\n}\n\ninterface RegisterRequest {\n  name: string;\n  email: string;\n  password: string;\n  username: string;\n}\n\ninterface LoginRequest {\n  name: string;\n  email: string;\n  password: string;\n  username: string;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class UserService {\n  private apiUrl = `${environment.apiUrl}/api/users`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    this.loadUserFromStorage();\n  }\n\n  private loadUserFromStorage(): void {\n    const userString = localStorage.getItem(\"currentUser\");\n    if (userString) {\n      try {\n        const userData = JSON.parse(userString);\n        this.currentUserSubject.next(userData);\n      } catch (error) {\n        console.error(\"Error parsing stored user data\", error);\n        localStorage.removeItem(\"currentUser\");\n      }\n    }\n  }\n\n  // Register a new user\n  register(user: RegisterRequest): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, user);\n  }\n\n  // Login user\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.http\n      .post<LoginResponse>(`${this.apiUrl}/login`, credentials)\n      .pipe(\n        tap((response) => {\n          localStorage.setItem(\"token\", response.token);\n          localStorage.setItem(\"currentUser\", JSON.stringify(response.user));\n          this.currentUserSubject.next(response.user);\n        })\n      );\n  }\n\n  // Get user by ID\n  getUserById(userId: string): Observable<User> {\n    return this.http.get<User>(`${this.apiUrl}/${userId}`);\n  }\n\n  // Update user profile\n  updateProfile(userId: string, userData: Partial<User>): Observable<User> {\n    return this.http.put<User>(`${this.apiUrl}/${userId}`, userData).pipe(\n      tap((updatedUser) => {\n        const currentUser = this.getCurrentUser();\n        if (currentUser && currentUser._id === updatedUser._id) {\n          const newUserData = { ...currentUser, ...updatedUser };\n          localStorage.setItem(\"currentUser\", JSON.stringify(newUserData));\n          this.currentUserSubject.next(newUserData);\n        }\n      })\n    );\n  }\n\n  // Get user sustainability stats\n  getUserStats(userId: string): Observable<UserStats> {\n    return this.http.get<UserStats>(`${this.apiUrl}/${userId}/stats`);\n  }\n\n  // Get user badges\n  getUserBadges(userId: string): Observable<{ badges: string[] }> {\n    return this.http.get<{ badges: string[] }>(\n      `${this.apiUrl}/${userId}/badges`\n    );\n  }\n\n  // Update user preferences\n  updateUserPreferences(\n    userId: string,\n    preferences: UserPreferences\n  ): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/${userId}/preferences`, {\n      goalPreferences: preferences,\n    });\n  }\n\n  // Log out user and clear storage\n  logout(): void {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"currentUser\");\n    this.currentUserSubject.next(null);\n  }\n\n  // Check if user is logged in\n  isLoggedIn(): boolean {\n    return !!localStorage.getItem(\"token\");\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem(\"token\");\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}