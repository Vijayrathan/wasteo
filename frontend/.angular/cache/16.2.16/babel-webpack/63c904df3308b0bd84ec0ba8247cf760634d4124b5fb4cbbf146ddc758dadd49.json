{"ast":null,"code":"import { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AiService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/ai`;\n  }\n  // Chat with AI assistant\n  chatWithAI(userId, message, chatId) {\n    return this.http.post(`${this.apiUrl}/chat`, {\n      userId,\n      message,\n      chatId\n    });\n  }\n  // Get all chats for a user\n  getUserChats(userId) {\n    return this.http.get(`${this.apiUrl}/chats`, {\n      params: {\n        userId\n      }\n    });\n  }\n  // Get a specific chat by ID\n  getChatById(chatId) {\n    return this.http.get(`${this.apiUrl}/chats/${chatId}`);\n  }\n  // Analyze user habits\n  analyzeHabits(userId) {\n    return this.http.post(`${this.apiUrl}/analyze-habits`, {\n      userId\n    });\n  }\n  // Get sustainability suggestions\n  getSuggestions(userId, category) {\n    const payload = {\n      userId\n    };\n    if (category) {\n      payload.category = category;\n    }\n    return this.http.post(`${this.apiUrl}/suggestions`, payload);\n  }\n  // Calculate carbon footprint\n  calculateFootprint(userId, description) {\n    return this.http.post(`${this.apiUrl}/calculate-footprint`, {\n      userId,\n      description\n    });\n  }\n  // Parse sustainability tips from text\n  parseSustainabilityTips(tipsText) {\n    // This is a simplified parser - a real implementation would be more robust\n    if (!tipsText) return [];\n    const tips = [];\n    // Split on numbered list patterns (1., 2., etc)\n    const tipSections = tipsText.split(/\\d+\\.\\s+/);\n    for (const section of tipSections) {\n      if (section.trim().length === 0) continue;\n      // Try to extract title, description and other details\n      const lines = section.split(\"\\n\").filter(line => line.trim().length > 0);\n      if (lines.length >= 2) {\n        const tip = {\n          title: lines[0].trim(),\n          description: lines[1].trim(),\n          carbonReduction: this.extractCarbonValue(section),\n          difficulty: this.extractDifficulty(section)\n        };\n        tips.push(tip);\n      }\n    }\n    return tips;\n  }\n  // Helper to extract carbon value from text\n  extractCarbonValue(text) {\n    const match = text.match(/(\\d+(\\.\\d+)?)\\s*(kg|kilograms?)\\s*(of)?\\s*(CO2|carbon dioxide)/i);\n    if (match && match[1]) {\n      return parseFloat(match[1]);\n    }\n    return 0;\n  }\n  // Helper to extract difficulty level from text\n  extractDifficulty(text) {\n    if (text.includes(\"Easy\")) return \"Easy\";\n    if (text.includes(\"Medium\")) return \"Medium\";\n    if (text.includes(\"Hard\")) return \"Hard\";\n    return \"Medium\"; // Default\n  }\n\n  static {\n    this.ɵfac = function AiService_Factory(t) {\n      return new (t || AiService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AiService,\n      factory: AiService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["environment","AiService","constructor","http","apiUrl","chatWithAI","userId","message","chatId","post","getUserChats","get","params","getChatById","analyzeHabits","getSuggestions","category","payload","calculateFootprint","description","parseSustainabilityTips","tipsText","tips","tipSections","split","section","trim","length","lines","filter","line","tip","title","carbonReduction","extractCarbonValue","difficulty","extractDifficulty","push","text","match","parseFloat","includes","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/thameem/Desktop/Spring 2025/Waste0/frontend/src/app/services/ai.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { ChatResponse, Chat, FootprintAnalysis } from \"../models/chat.model\";\nimport { environment } from \"../../environments/environment\";\nimport { HabitCategory } from \"../models/habit.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AiService {\n  private apiUrl = `${environment.apiUrl}/ai`;\n\n  constructor(private http: HttpClient) {}\n\n  // Chat with AI assistant\n  chatWithAI(\n    userId: string,\n    message: string,\n    chatId?: string\n  ): Observable<ChatResponse> {\n    return this.http.post<ChatResponse>(`${this.apiUrl}/chat`, {\n      userId,\n      message,\n      chatId,\n    });\n  }\n\n  // Get all chats for a user\n  getUserChats(userId: string): Observable<Chat[]> {\n    return this.http.get<Chat[]>(`${this.apiUrl}/chats`, {\n      params: { userId },\n    });\n  }\n\n  // Get a specific chat by ID\n  getChatById(chatId: string): Observable<Chat> {\n    return this.http.get<Chat>(`${this.apiUrl}/chats/${chatId}`);\n  }\n\n  // Analyze user habits\n  analyzeHabits(userId: string): Observable<{\n    analysis: string;\n    userProfile: {\n      sustainabilityScore: number;\n      greenPoints: number;\n      badges: string[];\n    };\n    habitCount: number;\n  }> {\n    return this.http.post<{\n      analysis: string;\n      userProfile: {\n        sustainabilityScore: number;\n        greenPoints: number;\n        badges: string[];\n      };\n      habitCount: number;\n    }>(`${this.apiUrl}/analyze-habits`, { userId });\n  }\n\n  // Get sustainability suggestions\n  getSuggestions(\n    userId: string,\n    category?: HabitCategory\n  ): Observable<{\n    suggestions: string;\n    category: string;\n    userProfile: {\n      sustainabilityScore: number;\n      greenPoints: number;\n    };\n  }> {\n    const payload: any = { userId };\n    if (category) {\n      payload.category = category;\n    }\n\n    return this.http.post<{\n      suggestions: string;\n      category: string;\n      userProfile: {\n        sustainabilityScore: number;\n        greenPoints: number;\n      };\n    }>(`${this.apiUrl}/suggestions`, payload);\n  }\n\n  // Calculate carbon footprint\n  calculateFootprint(\n    userId: string,\n    description: string\n  ): Observable<FootprintAnalysis> {\n    return this.http.post<FootprintAnalysis>(\n      `${this.apiUrl}/calculate-footprint`,\n      {\n        userId,\n        description,\n      }\n    );\n  }\n\n  // Parse sustainability tips from text\n  parseSustainabilityTips(tipsText: string): any[] {\n    // This is a simplified parser - a real implementation would be more robust\n    if (!tipsText) return [];\n\n    const tips = [];\n    // Split on numbered list patterns (1., 2., etc)\n    const tipSections = tipsText.split(/\\d+\\.\\s+/);\n\n    for (const section of tipSections) {\n      if (section.trim().length === 0) continue;\n\n      // Try to extract title, description and other details\n      const lines = section\n        .split(\"\\n\")\n        .filter((line) => line.trim().length > 0);\n      if (lines.length >= 2) {\n        const tip = {\n          title: lines[0].trim(),\n          description: lines[1].trim(),\n          carbonReduction: this.extractCarbonValue(section),\n          difficulty: this.extractDifficulty(section),\n        };\n        tips.push(tip);\n      }\n    }\n\n    return tips;\n  }\n\n  // Helper to extract carbon value from text\n  private extractCarbonValue(text: string): number {\n    const match = text.match(\n      /(\\d+(\\.\\d+)?)\\s*(kg|kilograms?)\\s*(of)?\\s*(CO2|carbon dioxide)/i\n    );\n    if (match && match[1]) {\n      return parseFloat(match[1]);\n    }\n    return 0;\n  }\n\n  // Helper to extract difficulty level from text\n  private extractDifficulty(text: string): \"Easy\" | \"Medium\" | \"Hard\" {\n    if (text.includes(\"Easy\")) return \"Easy\";\n    if (text.includes(\"Medium\")) return \"Medium\";\n    if (text.includes(\"Hard\")) return \"Hard\";\n    return \"Medium\"; // Default\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}