{"ast":null,"code":"import { HttpParams } from \"@angular/common/http\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HabitService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/habits`;\n  }\n  // Get all habits for a user\n  getUserHabits(userId) {\n    const params = new HttpParams().set(\"userId\", userId);\n    return this.http.get(this.apiUrl, {\n      params\n    });\n  }\n  // Get habit by ID\n  getHabitById(habitId) {\n    return this.http.get(`${this.apiUrl}/${habitId}`);\n  }\n  // Create new habit\n  createHabit(habitData) {\n    return this.http.post(this.apiUrl, habitData);\n  }\n  // Update habit\n  updateHabit(habitId, habitData) {\n    return this.http.put(`${this.apiUrl}/${habitId}`, habitData);\n  }\n  // Delete habit\n  deleteHabit(habitId) {\n    return this.http.delete(`${this.apiUrl}/${habitId}`);\n  }\n  // Complete habit\n  completeHabit(habitId) {\n    return this.http.post(`${this.apiUrl}/${habitId}/complete`, {});\n  }\n  // Get weekly habit summary\n  getWeeklyHabitSummary(userId) {\n    const params = new HttpParams().set(\"userId\", userId);\n    return this.http.get(`${this.apiUrl}/summary/weekly`, {\n      params\n    });\n  }\n  // Get habits by category\n  getHabitsByCategory(userId, category) {\n    const params = new HttpParams().set(\"userId\", userId);\n    return this.http.get(`${this.apiUrl}/categories/${category}`, {\n      params\n    });\n  }\n  // Calculate carbon footprint reduction for habits\n  calculateCarbonReduction(habits) {\n    if (!habits || habits.length === 0) return 0;\n    // Sum up carbon footprint values from all habits\n    return habits.reduce((total, habit) => total + (habit.carbonFootprint || 0), 0);\n  }\n  // Group habits by category\n  groupHabitsByCategory(habits) {\n    if (!habits || habits.length === 0) return {};\n    return habits.reduce((grouped, habit) => {\n      const category = habit.category;\n      if (!grouped[category]) {\n        grouped[category] = [];\n      }\n      grouped[category].push(habit);\n      return grouped;\n    }, {});\n  }\n  static {\n    this.ɵfac = function HabitService_Factory(t) {\n      return new (t || HabitService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HabitService,\n      factory: HabitService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","environment","HabitService","constructor","http","apiUrl","getUserHabits","userId","params","set","get","getHabitById","habitId","createHabit","habitData","post","updateHabit","put","deleteHabit","delete","completeHabit","getWeeklyHabitSummary","getHabitsByCategory","category","calculateCarbonReduction","habits","length","reduce","total","habit","carbonFootprint","groupHabitsByCategory","grouped","push","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/thameem/Desktop/Spring 2025/Waste0/frontend/src/app/services/habit.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport {\n  Habit,\n  HabitCompletion,\n  WeeklyHabitSummary,\n  HabitCategory,\n} from \"../models/habit.model\";\nimport { environment } from \"../../environments/environment\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class HabitService {\n  private apiUrl = `${environment.apiUrl}/habits`;\n\n  constructor(private http: HttpClient) {}\n\n  // Get all habits for a user\n  getUserHabits(userId: string): Observable<Habit[]> {\n    const params = new HttpParams().set(\"userId\", userId);\n    return this.http.get<Habit[]>(this.apiUrl, { params });\n  }\n\n  // Get habit by ID\n  getHabitById(habitId: string): Observable<Habit> {\n    return this.http.get<Habit>(`${this.apiUrl}/${habitId}`);\n  }\n\n  // Create new habit\n  createHabit(habitData: Partial<Habit>): Observable<Habit> {\n    return this.http.post<Habit>(this.apiUrl, habitData);\n  }\n\n  // Update habit\n  updateHabit(habitId: string, habitData: Partial<Habit>): Observable<Habit> {\n    return this.http.put<Habit>(`${this.apiUrl}/${habitId}`, habitData);\n  }\n\n  // Delete habit\n  deleteHabit(habitId: string): Observable<{ message: string }> {\n    return this.http.delete<{ message: string }>(`${this.apiUrl}/${habitId}`);\n  }\n\n  // Complete habit\n  completeHabit(habitId: string): Observable<HabitCompletion> {\n    return this.http.post<HabitCompletion>(\n      `${this.apiUrl}/${habitId}/complete`,\n      {}\n    );\n  }\n\n  // Get weekly habit summary\n  getWeeklyHabitSummary(userId: string): Observable<WeeklyHabitSummary> {\n    const params = new HttpParams().set(\"userId\", userId);\n    return this.http.get<WeeklyHabitSummary>(`${this.apiUrl}/summary/weekly`, {\n      params,\n    });\n  }\n\n  // Get habits by category\n  getHabitsByCategory(\n    userId: string,\n    category: HabitCategory\n  ): Observable<Habit[]> {\n    const params = new HttpParams().set(\"userId\", userId);\n    return this.http.get<Habit[]>(`${this.apiUrl}/categories/${category}`, {\n      params,\n    });\n  }\n\n  // Calculate carbon footprint reduction for habits\n  calculateCarbonReduction(habits: Habit[]): number {\n    if (!habits || habits.length === 0) return 0;\n\n    // Sum up carbon footprint values from all habits\n    return habits.reduce(\n      (total, habit) => total + (habit.carbonFootprint || 0),\n      0\n    );\n  }\n\n  // Group habits by category\n  groupHabitsByCategory(habits: Habit[]): Record<HabitCategory, Habit[]> {\n    if (!habits || habits.length === 0)\n      return {} as Record<HabitCategory, Habit[]>;\n\n    return habits.reduce((grouped, habit) => {\n      const category = habit.category;\n      if (!grouped[category]) {\n        grouped[category] = [];\n      }\n      grouped[category].push(habit);\n      return grouped;\n    }, {} as Record<HabitCategory, Habit[]>);\n  }\n}\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;AAQ7D,SAASC,WAAW,QAAQ,gCAAgC;;;AAK5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAER;EAEvC;EACAC,aAAaA,CAACC,MAAc;IAC1B,MAAMC,MAAM,GAAG,IAAIR,UAAU,EAAE,CAACS,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;IACrD,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAU,IAAI,CAACL,MAAM,EAAE;MAAEG;IAAM,CAAE,CAAC;EACxD;EAEA;EACAG,YAAYA,CAACC,OAAe;IAC1B,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAQ,GAAG,IAAI,CAACL,MAAM,IAAIO,OAAO,EAAE,CAAC;EAC1D;EAEA;EACAC,WAAWA,CAACC,SAAyB;IACnC,OAAO,IAAI,CAACV,IAAI,CAACW,IAAI,CAAQ,IAAI,CAACV,MAAM,EAAES,SAAS,CAAC;EACtD;EAEA;EACAE,WAAWA,CAACJ,OAAe,EAAEE,SAAyB;IACpD,OAAO,IAAI,CAACV,IAAI,CAACa,GAAG,CAAQ,GAAG,IAAI,CAACZ,MAAM,IAAIO,OAAO,EAAE,EAAEE,SAAS,CAAC;EACrE;EAEA;EACAI,WAAWA,CAACN,OAAe;IACzB,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAsB,GAAG,IAAI,CAACd,MAAM,IAAIO,OAAO,EAAE,CAAC;EAC3E;EAEA;EACAQ,aAAaA,CAACR,OAAe;IAC3B,OAAO,IAAI,CAACR,IAAI,CAACW,IAAI,CACnB,GAAG,IAAI,CAACV,MAAM,IAAIO,OAAO,WAAW,EACpC,EAAE,CACH;EACH;EAEA;EACAS,qBAAqBA,CAACd,MAAc;IAClC,MAAMC,MAAM,GAAG,IAAIR,UAAU,EAAE,CAACS,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;IACrD,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAqB,GAAG,IAAI,CAACL,MAAM,iBAAiB,EAAE;MACxEG;KACD,CAAC;EACJ;EAEA;EACAc,mBAAmBA,CACjBf,MAAc,EACdgB,QAAuB;IAEvB,MAAMf,MAAM,GAAG,IAAIR,UAAU,EAAE,CAACS,GAAG,CAAC,QAAQ,EAAEF,MAAM,CAAC;IACrD,OAAO,IAAI,CAACH,IAAI,CAACM,GAAG,CAAU,GAAG,IAAI,CAACL,MAAM,eAAekB,QAAQ,EAAE,EAAE;MACrEf;KACD,CAAC;EACJ;EAEA;EACAgB,wBAAwBA,CAACC,MAAe;IACtC,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,CAAC;IAE5C;IACA,OAAOD,MAAM,CAACE,MAAM,CAClB,CAACC,KAAK,EAAEC,KAAK,KAAKD,KAAK,IAAIC,KAAK,CAACC,eAAe,IAAI,CAAC,CAAC,EACtD,CAAC,CACF;EACH;EAEA;EACAC,qBAAqBA,CAACN,MAAe;IACnC,IAAI,CAACA,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,CAAC,EAChC,OAAO,EAAoC;IAE7C,OAAOD,MAAM,CAACE,MAAM,CAAC,CAACK,OAAO,EAAEH,KAAK,KAAI;MACtC,MAAMN,QAAQ,GAAGM,KAAK,CAACN,QAAQ;MAC/B,IAAI,CAACS,OAAO,CAACT,QAAQ,CAAC,EAAE;QACtBS,OAAO,CAACT,QAAQ,CAAC,GAAG,EAAE;;MAExBS,OAAO,CAACT,QAAQ,CAAC,CAACU,IAAI,CAACJ,KAAK,CAAC;MAC7B,OAAOG,OAAO;IAChB,CAAC,EAAE,EAAoC,CAAC;EAC1C;;;uBAlFW9B,YAAY,EAAAgC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZnC,YAAY;MAAAoC,OAAA,EAAZpC,YAAY,CAAAqC,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}