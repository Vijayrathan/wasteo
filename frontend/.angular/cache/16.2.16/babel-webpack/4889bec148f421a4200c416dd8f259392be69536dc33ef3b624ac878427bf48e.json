{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Check if the user is logged in\n    if (this.userService.isLoggedIn()) {\n      return true;\n    }\n    // If not logged in, redirect to the login page with the return url\n    return this.router.createUrlTree([\"/login\"], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","userService","router","canActivate","route","state","isLoggedIn","createUrlTree","queryParams","returnUrl","url","i0","ɵɵinject","i1","UserService","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/thameem/Desktop/Spring 2025/Waste0/frontend/src/app/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  CanActivate,\n  ActivatedRouteSnapshot,\n  RouterStateSnapshot,\n  Router,\n  UrlTree,\n} from \"@angular/router\";\nimport { Observable } from \"rxjs\";\nimport { UserService } from \"../services/user.service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class AuthGuard implements CanActivate {\n  constructor(private userService: UserService, private router: Router) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ):\n    | Observable<boolean | UrlTree>\n    | Promise<boolean | UrlTree>\n    | boolean\n    | UrlTree {\n    // Check if the user is logged in\n    if (this.userService.isLoggedIn()) {\n      return true;\n    }\n\n    // If not logged in, redirect to the login page with the return url\n    return this.router.createUrlTree([\"/login\"], {\n      queryParams: { returnUrl: state.url },\n    });\n  }\n}\n"],"mappings":";;;AAcA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAM1B;IACA,IAAI,IAAI,CAACJ,WAAW,CAACK,UAAU,EAAE,EAAE;MACjC,OAAO,IAAI;;IAGb;IACA,OAAO,IAAI,CAACJ,MAAM,CAACK,aAAa,CAAC,CAAC,QAAQ,CAAC,EAAE;MAC3CC,WAAW,EAAE;QAAEC,SAAS,EAAEJ,KAAK,CAACK;MAAG;KACpC,CAAC;EACJ;;;uBApBWX,SAAS,EAAAY,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAATjB,SAAS;MAAAkB,OAAA,EAATlB,SAAS,CAAAmB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}