{"ast":null,"code":"import { Observable, of } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nexport class ChatService {\n  constructor(http, userService) {\n    this.http = http;\n    this.userService = userService;\n    this.apiUrl = `${environment.apiUrl}/api/chat`;\n    // For demo purposes: store chat history locally\n    this.chatHistory = [];\n  }\n  // Get chat history for the current user\n  getChatHistory() {\n    // In a real app, this would fetch from the backend\n    if (this.userService.isLoggedIn()) {\n      // For now, return the locally stored history for demo\n      return of(this.chatHistory);\n      // When backend is ready:\n      // return this.http.get<ChatMessage[]>(`${this.apiUrl}/history`);\n    }\n\n    return of([]);\n  }\n  // Send a message to the AI and get a response\n  sendMessage(message) {\n    // Add user message to local history\n    this.addToHistory(\"user\", message);\n    // In a real app, this would send to the backend\n    // For demo, we can use a mock response\n    if (this.userService.isLoggedIn()) {\n      // Simulate API delay\n      return new Observable(observer => {\n        setTimeout(() => {\n          const mockResponse = this.getMockResponse(message);\n          // Add AI response to local history\n          this.addToHistory(\"ai\", mockResponse.reply);\n          observer.next(mockResponse);\n          observer.complete();\n        }, 1500);\n      });\n      // When backend is ready:\n      // return this.http.post<ChatResponse>(`${this.apiUrl}/message`, { message });\n    }\n    // If not logged in, return error\n    return new Observable(observer => {\n      observer.error({\n        error: {\n          message: \"You must be logged in to use the chat.\"\n        }\n      });\n    });\n  }\n  // Clear chat history\n  clearChatHistory() {\n    // Clear local history\n    this.chatHistory = [];\n    // In a real app, this would clear history in the backend\n    // return this.http.delete(`${this.apiUrl}/history`);\n    return of({\n      success: true\n    });\n  }\n  // Helper method to add messages to local history\n  addToHistory(sender, content) {\n    this.chatHistory.push({\n      sender,\n      content,\n      timestamp: new Date()\n    });\n  }\n  // Mock responses for demo purposes\n  getMockResponse(userMessage) {\n    const message = userMessage.toLowerCase();\n    let reply = \"\";\n    if (message.includes(\"carbon footprint\") || message.includes(\"reduce\") || message.includes(\"impact\")) {\n      reply = \"To reduce your carbon footprint, consider:\\n\\n\" + \"• Using public transportation or carpooling\\n\" + \"• Reducing meat consumption, especially beef\\n\" + \"• Using energy-efficient appliances\\n\" + \"• Insulating your home properly\\n\" + \"• Reducing single-use plastics\\n\\n\" + \"Would you like more specific tips on any of these areas?\";\n    } else if (message.includes(\"zero waste\") || message.includes(\"shopping\") || message.includes(\"plastic\")) {\n      reply = \"Here are some zero waste shopping tips:\\n\\n\" + \"• Bring your own reusable bags, including produce bags\\n\" + \"• Shop at bulk stores with your own containers\\n\" + \"• Choose products with minimal or recyclable packaging\\n\" + \"• Buy fresh produce instead of pre-packaged foods\\n\" + \"• Plan meals to reduce food waste\\n\\n\" + \"Did you know? The average person generates about 4.5 pounds of trash every day!\";\n    } else if (message.includes(\"energy\") || message.includes(\"electricity\") || message.includes(\"home\")) {\n      reply = \"To save energy at home:\\n\\n\" + \"• Replace regular bulbs with LED lighting\\n\" + \"• Use a programmable thermostat to optimize heating/cooling\\n\" + \"• Unplug devices when not in use to prevent phantom energy drain\\n\" + \"• Wash clothes in cold water when possible\\n\" + \"• Ensure your home is properly insulated\\n\\n\" + \"These changes can reduce your energy bills by up to 30%!\";\n    } else if (message.includes(\"compost\") || message.includes(\"food waste\")) {\n      reply = \"Composting at home is easier than you might think!\\n\\n\" + \"You can start with:\\n\" + \"• A small countertop bin for daily scraps\\n\" + \"• A larger outdoor bin or tumbler\\n\" + \"• Add fruit/vegetable scraps, coffee grounds, eggshells, yard trimmings\\n\" + \"• Avoid meat, dairy, and oils\\n\" + \"• Turn regularly and maintain proper moisture\\n\\n\" + \"Finished compost usually takes 2-6 months and provides excellent nutrients for your garden!\";\n    } else {\n      reply = \"Thanks for your message! I'm your sustainability assistant and can help with questions about reducing waste, sustainable living practices, carbon footprint reduction, eco-friendly products, and more. What specific sustainability topic would you like to explore?\";\n    }\n    return {\n      reply\n    };\n  }\n  static {\n    this.ɵfac = function ChatService_Factory(t) {\n      return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChatService,\n      factory: ChatService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n}","map":{"version":3,"names":["Observable","of","environment","ChatService","constructor","http","userService","apiUrl","chatHistory","getChatHistory","isLoggedIn","sendMessage","message","addToHistory","observer","setTimeout","mockResponse","getMockResponse","reply","next","complete","error","clearChatHistory","success","sender","content","push","timestamp","Date","userMessage","toLowerCase","includes","i0","ɵɵinject","i1","HttpClient","i2","UserService","factory","ɵfac","providedIn"],"sources":["/Users/thameem/Desktop/Spring 2025/Waste0/frontend/src/app/services/chat.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Observable, of } from \"rxjs\";\nimport { environment } from \"../../environments/environment\";\nimport { UserService } from \"./user.service\";\n\ninterface ChatMessage {\n  _id?: string;\n  sender: string;\n  content: string;\n  timestamp: Date;\n}\n\ninterface ChatResponse {\n  reply: string;\n  chatId?: string;\n}\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ChatService {\n  private apiUrl = `${environment.apiUrl}/api/chat`;\n\n  // For demo purposes: store chat history locally\n  private chatHistory: ChatMessage[] = [];\n\n  constructor(private http: HttpClient, private userService: UserService) {}\n\n  // Get chat history for the current user\n  getChatHistory(): Observable<ChatMessage[]> {\n    // In a real app, this would fetch from the backend\n    if (this.userService.isLoggedIn()) {\n      // For now, return the locally stored history for demo\n      return of(this.chatHistory);\n\n      // When backend is ready:\n      // return this.http.get<ChatMessage[]>(`${this.apiUrl}/history`);\n    }\n    return of([]);\n  }\n\n  // Send a message to the AI and get a response\n  sendMessage(message: string): Observable<ChatResponse> {\n    // Add user message to local history\n    this.addToHistory(\"user\", message);\n\n    // In a real app, this would send to the backend\n    // For demo, we can use a mock response\n    if (this.userService.isLoggedIn()) {\n      // Simulate API delay\n      return new Observable<ChatResponse>((observer) => {\n        setTimeout(() => {\n          const mockResponse = this.getMockResponse(message);\n          // Add AI response to local history\n          this.addToHistory(\"ai\", mockResponse.reply);\n\n          observer.next(mockResponse);\n          observer.complete();\n        }, 1500);\n      });\n\n      // When backend is ready:\n      // return this.http.post<ChatResponse>(`${this.apiUrl}/message`, { message });\n    }\n\n    // If not logged in, return error\n    return new Observable<ChatResponse>((observer) => {\n      observer.error({\n        error: { message: \"You must be logged in to use the chat.\" },\n      });\n    });\n  }\n\n  // Clear chat history\n  clearChatHistory(): Observable<any> {\n    // Clear local history\n    this.chatHistory = [];\n\n    // In a real app, this would clear history in the backend\n    // return this.http.delete(`${this.apiUrl}/history`);\n\n    return of({ success: true });\n  }\n\n  // Helper method to add messages to local history\n  private addToHistory(sender: string, content: string): void {\n    this.chatHistory.push({\n      sender,\n      content,\n      timestamp: new Date(),\n    });\n  }\n\n  // Mock responses for demo purposes\n  private getMockResponse(userMessage: string): ChatResponse {\n    const message = userMessage.toLowerCase();\n    let reply = \"\";\n\n    if (\n      message.includes(\"carbon footprint\") ||\n      message.includes(\"reduce\") ||\n      message.includes(\"impact\")\n    ) {\n      reply =\n        \"To reduce your carbon footprint, consider:\\n\\n\" +\n        \"• Using public transportation or carpooling\\n\" +\n        \"• Reducing meat consumption, especially beef\\n\" +\n        \"• Using energy-efficient appliances\\n\" +\n        \"• Insulating your home properly\\n\" +\n        \"• Reducing single-use plastics\\n\\n\" +\n        \"Would you like more specific tips on any of these areas?\";\n    } else if (\n      message.includes(\"zero waste\") ||\n      message.includes(\"shopping\") ||\n      message.includes(\"plastic\")\n    ) {\n      reply =\n        \"Here are some zero waste shopping tips:\\n\\n\" +\n        \"• Bring your own reusable bags, including produce bags\\n\" +\n        \"• Shop at bulk stores with your own containers\\n\" +\n        \"• Choose products with minimal or recyclable packaging\\n\" +\n        \"• Buy fresh produce instead of pre-packaged foods\\n\" +\n        \"• Plan meals to reduce food waste\\n\\n\" +\n        \"Did you know? The average person generates about 4.5 pounds of trash every day!\";\n    } else if (\n      message.includes(\"energy\") ||\n      message.includes(\"electricity\") ||\n      message.includes(\"home\")\n    ) {\n      reply =\n        \"To save energy at home:\\n\\n\" +\n        \"• Replace regular bulbs with LED lighting\\n\" +\n        \"• Use a programmable thermostat to optimize heating/cooling\\n\" +\n        \"• Unplug devices when not in use to prevent phantom energy drain\\n\" +\n        \"• Wash clothes in cold water when possible\\n\" +\n        \"• Ensure your home is properly insulated\\n\\n\" +\n        \"These changes can reduce your energy bills by up to 30%!\";\n    } else if (message.includes(\"compost\") || message.includes(\"food waste\")) {\n      reply =\n        \"Composting at home is easier than you might think!\\n\\n\" +\n        \"You can start with:\\n\" +\n        \"• A small countertop bin for daily scraps\\n\" +\n        \"• A larger outdoor bin or tumbler\\n\" +\n        \"• Add fruit/vegetable scraps, coffee grounds, eggshells, yard trimmings\\n\" +\n        \"• Avoid meat, dairy, and oils\\n\" +\n        \"• Turn regularly and maintain proper moisture\\n\\n\" +\n        \"Finished compost usually takes 2-6 months and provides excellent nutrients for your garden!\";\n    } else {\n      reply =\n        \"Thanks for your message! I'm your sustainability assistant and can help with questions about reducing waste, sustainable living practices, carbon footprint reduction, eco-friendly products, and more. What specific sustainability topic would you like to explore?\";\n    }\n\n    return { reply };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}