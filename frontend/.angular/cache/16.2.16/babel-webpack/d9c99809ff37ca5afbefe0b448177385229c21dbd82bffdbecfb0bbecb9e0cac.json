{"ast":null,"code":"import { throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Get the auth token\n    const token = this.userService.getToken();\n    // Clone the request and add the authorization header if token exists\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    // Handle the request and catch any errors\n    return next.handle(request).pipe(catchError(error => {\n      // Handle 401 Unauthorized errors by logging out and redirecting to login\n      if (error.status === 401) {\n        this.userService.logout();\n        this.router.navigate([\"/login\"]);\n      }\n      // Re-throw the error for further handling\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","AuthInterceptor","constructor","userService","router","intercept","request","next","token","getToken","clone","setHeaders","Authorization","handle","pipe","error","status","logout","navigate","i0","ɵɵinject","i1","UserService","i2","Router","factory","ɵfac"],"sources":["/Users/thameem/Desktop/Spring 2025/Waste0/frontend/src/app/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse,\n} from \"@angular/common/http\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { Router } from \"@angular/router\";\nimport { UserService } from \"../services/user.service\";\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n  constructor(private userService: UserService, private router: Router) {}\n\n  intercept(\n    request: HttpRequest<unknown>,\n    next: HttpHandler\n  ): Observable<HttpEvent<unknown>> {\n    // Get the auth token\n    const token = this.userService.getToken();\n\n    // Clone the request and add the authorization header if token exists\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n    }\n\n    // Handle the request and catch any errors\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Handle 401 Unauthorized errors by logging out and redirecting to login\n        if (error.status === 401) {\n          this.userService.logout();\n          this.router.navigate([\"/login\"]);\n        }\n\n        // Re-throw the error for further handling\n        return throwError(() => error);\n      })\n    );\n  }\n}\n"],"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;;AAK3C,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,SAASA,CACPC,OAA6B,EAC7BC,IAAiB;IAEjB;IACA,MAAMC,KAAK,GAAG,IAAI,CAACL,WAAW,CAACM,QAAQ,EAAE;IAEzC;IACA,IAAID,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACI,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUJ,KAAK;;OAEjC,CAAC;;IAGJ;IACA,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC,CAACQ,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB,IAAI,CAACb,WAAW,CAACc,MAAM,EAAE;QACzB,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;;MAGlC;MACA,OAAOnB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBAhCWd,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAfvB,eAAe;MAAAwB,OAAA,EAAfxB,eAAe,CAAAyB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}